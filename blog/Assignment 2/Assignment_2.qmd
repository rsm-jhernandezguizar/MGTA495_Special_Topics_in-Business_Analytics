---
title: "Poisson Regression Examples"
description: "Assignment 2"
image: /images/assignment2.jpg
date: 2025-05-07
author: Juan Hernández Guizar
callout-appearance: minimal # this hides the blue "i" icon on .callout-notes
---

## Blueprinty Case Study

### Introduction

Blueprinty is a small firm that makes software for developing blueprints specifically for submitting patent applications to the US patent office. Their marketing team would like to make the claim that patent applicants using Blueprinty's software are more successful in getting their patent applications approved. Ideal data to study such an effect might include the success rate of patent applications before using Blueprinty's software and after using it. Unfortunately, such data is not available. 

However, Blueprinty has collected data on 1,500 mature (non-startup) engineering firms. The data include each firm's number of patents awarded over the last 5 years, regional location, age since incorporation, and whether or not the firm uses Blueprinty's software. The marketing team would like to use this data to make the claim that firms using Blueprinty's software are more successful in getting their patent applications approved.


### Data

To start we will review the first 5 data points collected in a table format: 

```{python}
# | echo: false
import pandas as pd

blueprinty = pd.read_csv("Assignment_2_data/blueprinty.csv")
# Preview
blueprinty.head()
```

_todo: Compare histograms and means of number of patents by customer status. What do you observe?_

Below is the distribution of patents among Blueprinty customers vs non-customers. The histogram shows that Blueprinty customers (teal bars) tend to have more patents on average than non-customers (light blue bars). 

```{python}
# | echo: false
import matplotlib.pyplot as plt
import seaborn as sns

fig, ax = plt.subplots()
sns.histplot(
    data=blueprinty,
    x="patents",
    hue="iscustomer",
    bins=range(0, blueprinty["patents"].max() + 2),
    palette={0: "#ADD8E6", 1: "teal"},
    alpha=0.8,
    ax=ax,
)
ax.set_xlabel("Patents in last 5 years")
ax.set_ylabel("Number of firms")
ax.set_title("Patent distribution by Blueprinty customer status")
ax.legend(title="Is Blueprinty customer", labels=["No (0)", "Yes (1)"])
plt.tight_layout()
plt.show()
```

```{python}
# | echo: false
mean_patents = (
    blueprinty.groupby("iscustomer", as_index=False)["patents"]
    .mean()
    .assign(status=lambda d: d["iscustomer"].map({0: "Non-customer", 1: "Customer"}))
)

fig, ax = plt.subplots()
sns.barplot(
    data=mean_patents,
    x="status",
    y="patents",
    hue="status",
    ax=ax,
    palette="Set2",
    legend=False,
)
ax.set_ylabel("Mean patents (5 yrs)")
ax.set_xlabel("")
ax.set_title("Average patents by Blueprinty usage")
plt.tight_layout()
plt.show()
```

Firms using Blueprinty software are more frequently observed with around 4–6 patents in five years, whereas non-customer firms more often have only 0–2 patents. This indicates that the customer group’s patent count distribution is shifted to the right, with a higher mean (about 4.13 vs 3.47 for non-customers).

On average, Blueprinty customers have approximately 4.13 patents over 5 years, compared to about 3.47 for non-customers. While this naive comparison suggests customers produce more patents, we must consider that Blueprinty’s customers may differ systematically in other ways (e.g. perhaps they are older firms or clustered in certain regions).

Let’s examine the age and regional composition of customers vs non-customers. 

```{python}
# | echo: false
fig, ax = plt.subplots()
sns.histplot(
    data=blueprinty,
    x="age",
    hue="iscustomer",
    kde=True,
    common_norm=False,
    palette={0: "steelblue", 1: "seagreen"},
    alpha=0.6,
    ax=ax,
)
ax.set_xlabel("Firm age (years)")
ax.set_ylabel("Number of firms")
ax.set_title("Age distribution by Blueprinty customer status")
ax.legend(title="Is customer", labels=["No", "Yes"])
plt.tight_layout()
plt.show()
```

Blueprinty customers have a slightly higher mean age since incorporation (about 26.9 years) than non-customers (26.1 years), but the age distributions largely overlap (both groups are typically 20–30 years old, with only minor differences). This suggests that firm age might not differ dramatically by customer status, though we will account for age in the analysis.

Regionally, there are stark differences in who adopts Blueprinty’s software.

_todo: Compare regions and ages by customer status. What do you observe?_
```{python}
# | echo: false
region_counts = (
    blueprinty.groupby(["region", "iscustomer"]).size().reset_index(name="count")
)

fig, ax = plt.subplots()
sns.barplot(
    data=region_counts,
    x="region",
    y="count",
    hue="iscustomer",
    palette={0: "steelblue", 1: "limegreen"},
    ax=ax,
)
ax.set_ylabel("Number of firms")
ax.set_xlabel("Region")
ax.set_title("Firms by region and Blueprinty customer status")
ax.legend(title="Is customer", labels=["No", "Yes"])
plt.tight_layout()
plt.show()
```

Counts of firms by region and Blueprinty customer status. In the Northeast region, the green bar (Blueprinty customers) is nearly as high as the blue bar (non-customers), indicating a large share of Blueprinty’s users are in the Northeast. In contrast, in all other regions (Midwest, South, Southwest, Northwest) the majority of firms are non-customers. This reveals that Blueprinty’s customer base is heavily concentrated in the Northeast, which suggests potential selection bias by region.

Indeed, about 68% of Blueprinty’s customers are located in the Northeast, whereas only ~27% of non-customer firms are in the Northeast. Other regions (Midwest, South, Southwest, Northwest) are under-represented among customers relative to non-customers. This imbalance means any raw difference in patent counts could partly reflect regional effects. In summary, Blueprinty customers tend to have slightly older firms (though age differences are minor) and are much more likely to be in the Northeast region. We will need to control for these factors when analyzing the effect of Blueprinty’s software on patent output.

### Estimation of Simple Poisson Model

Since our outcome variable of interest can only be small integer values per a set unit of time, we can use a Poisson density to model the number of patents awarded to each engineering firm over the last 5 years. We start by estimating a simple Poisson model via Maximum Likelihood.

_todo: Write down mathematically the likelihood for_ $Y \sim \text{Poisson}(\lambda)$. Note that $f(Y|\lambda) = e^{-\lambda}\lambda^Y/Y!$.

_todo: Code the likelihood (or log-likelihood) function for the Poisson model. This is a function of lambda and Y. For example:_

```
poisson_loglikelihood <- function(lambda, Y){
   ...
}
```

_todo: Use your function to plot lambda on the horizontal axis and the likelihood (or log-likelihood) on the vertical axis for a range of lambdas (use the observed number of patents as the input for Y)._

_todo: If you're feeling mathematical, take the first derivative of your likelihood or log-likelihood, set it equal to zero and solve for lambda. You will find lambda_mle is Ybar, which "feels right" because the mean of a Poisson distribution is lambda._

_todo: Find the MLE by optimizing your likelihood function with optim() in R or sp.optimize() in Python._


### Estimation of Poisson Regression Model

Next, we extend our simple Poisson model to a Poisson Regression Model such that $Y_i = \text{Poisson}(\lambda_i)$ where $\lambda_i = \exp(X_i'\beta)$. The interpretation is that the success rate of patent awards is not constant across all firms ($\lambda$) but rather is a function of firm characteristics $X_i$. Specifically, we will use the covariates age, age squared, region, and whether the firm is a customer of Blueprinty.

_todo: Update your likelihood or log-likelihood function with an additional argument to take in a covariate matrix X. Also change the parameter of the model from lambda to the beta vector. In this model, lambda must be a positive number, so we choose the inverse link function g_inv() to be exp() so that_ $\lambda_i = e^{X_i'\beta}$. _For example:_

```
poisson_regression_likelihood <- function(beta, Y, X){
   ...
}
```

_todo: Use your function along with R's optim() or Python's sp.optimize() to find the MLE vector and the Hessian of the Poisson model with covariates. Specifically, the first column of X should be all 1's to enable a constant term in the model, and the subsequent columns should be age, age squared, binary variables for all but one of the regions, and the binary customer variable. Use the Hessian to find standard errors of the beta parameter estimates and present a table of coefficients and standard errors._

_todo: Check your results using R's glm() function or Python sm.GLM() function._

_todo: Interpret the results._ 

_todo: What do you conclude about the effect of Blueprinty's software on patent success? Because the beta coefficients are not directly interpretable, it may help to create two fake datasets: X_0 and X_1 where X_0 is the X data but with iscustomer=0 for every observation and X_1 is the X data but with iscustomer=1 for every observation. Then, use X_0 and your fitted model to get the vector of predicted number of patents (y_pred_0) for every firm in the dataset, and use X_1 to get Y_pred_1 for every firm. Then subtract y_pred_1 minus y_pred_0 and take the average of that vector of differences._




## AirBnB Case Study

### Introduction

AirBnB is a popular platform for booking short-term rentals. In March 2017, students Annika Awad, Evan Lebo, and Anna Linden scraped of 40,000 Airbnb listings from New York City.  The data include the following variables:

:::: {.callout-note collapse="true"}
### Variable Definitions

    - `id` = unique ID number for each unit
    - `last_scraped` = date when information scraped
    - `host_since` = date when host first listed the unit on Airbnb
    - `days` = `last_scraped` - `host_since` = number of days the unit has been listed
    - `room_type` = Entire home/apt., Private room, or Shared room
    - `bathrooms` = number of bathrooms
    - `bedrooms` = number of bedrooms
    - `price` = price per night (dollars)
    - `number_of_reviews` = number of reviews for the unit on Airbnb
    - `review_scores_cleanliness` = a cleanliness score from reviews (1-10)
    - `review_scores_location` = a "quality of location" score from reviews (1-10)
    - `review_scores_value` = a "quality of value" score from reviews (1-10)
    - `instant_bookable` = "t" if instantly bookable, "f" if not

::::


_todo: Assume the number of reviews is a good proxy for the number of bookings. Perform some exploratory data analysis to get a feel for the data, handle or drop observations with missing values on relevant variables, build one or more models (e.g., a poisson regression model for the number of bookings as proxied by the number of reviews), and interpret model coefficients to describe variation in the number of reviews as a function of the variables provided._